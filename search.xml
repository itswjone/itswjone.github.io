<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试博客第二篇</title>
      <link href="/2023/04/09/ce-shi-bo-ke-di-er-pian/"/>
      <url>/2023/04/09/ce-shi-bo-ke-di-er-pian/</url>
      
        <content type="html"><![CDATA[<p><a name="nzYXj"></a></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Spring 3.0 版本之后自带定时任务，SpringBoot中的核心具有集成了Scheduled功能 提供了@EnableScheduling注解和@Scheduled注解来实现定时任务功能。</p><p>使用SpringBoot创建定时任务非常简单，目前主要有以下三种创建方式：</p><ul><li>1、基于注解（@Scheduled）</li><li>2、基于接口（SchedulingConfigurer） 前者相信大家都很熟悉，但是实际使用中我们往往想从数据库中读取指定时间来动态执行定时任务，这时候基于接口的定时任务就派上用场了。</li><li>3、基于注解设定多线程定时任务<br><a name="G8WjC"></a></li></ul><h1 id="基于注解（-Scheduled）"><a href="#基于注解（-Scheduled）" class="headerlink" title="基于注解（@Scheduled）"></a>基于注解（@Scheduled）</h1><p><a name="vo3Qa"></a></p><h2 id="1-1-Scheduled注解和-EnableScheduling注解的使用"><a href="#1-1-Scheduled注解和-EnableScheduling注解的使用" class="headerlink" title="1.1 @Scheduled注解和@EnableScheduling注解的使用"></a>1.1 @Scheduled注解和@EnableScheduling注解的使用</h2><p>基于注解@Scheduled默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。</p><p>@EnableScheduling注解： 在配置类上使用，开启计划任务的支持（类上）。</p><p>@Scheduled注解： 来声明这是一个任务，包括 cron，fixDelay，fixRate 等类型（方法上，需先开启计划任务的支持）。</p><p>【示例】SpringBoot项目中使用@Scheduled注解和@EnableScheduling注解实现定时任务。<br><strong>1）开启定时任务</strong><br>SpringBoot 项目在项目启动类上添加 @EnableScheduling 注解即可开启定时任务管理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableScheduling</span></span><span class="token punctuation">;</span> <span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment">//开启定时任务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledDemoApplication</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ScheduledDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）创建定时任务</strong><br>创建定时任务，并使用 @Scheduled 注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pjb<span class="token punctuation">.</span></span><span class="token class-name">Schedule</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Scheduled</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span> <span class="token comment">/** * 定时任务的使用 * @author  **/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron<span class="token operator">=</span><span class="token string">"0/5 * *  * * ? "</span><span class="token punctuation">)</span>   <span class="token comment">//每5秒执行一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SimpleDateFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置日期格式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎访问 "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="WLcZy"></a></p><h2 id="1-2-Scheduled注解各参数讲解"><a href="#1-2-Scheduled注解各参数讲解" class="headerlink" title="1.2 @Scheduled注解各参数讲解"></a>1.2 @Scheduled注解各参数讲解</h2><p>@Scheduled注解的使用这里不详细说明，直接对8个参数进行讲解。<br>@Scheduled注解类的源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Repeatable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span> <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token constant">CRON_DISABLED</span> <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="dAdse"></a></p><h3 id="1-2-1-cron"><a href="#1-2-1-cron" class="headerlink" title="1.2.1 cron"></a>1.2.1 cron</h3><p>该参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。</p><ul><li>年份(1970－2099)——@Scheduled是不支持的，spring quartz支持</li></ul><p>cron 表达式语法：<br>格式：**[秒] [分] [小时] [日] [月] [周] [年]**<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29229877/1667185916390-484b05fb-6ec7-4e52-8a7f-5906b4d5a12b.png#averageHue=%23f4f4f4&amp;clientId=u481d04c8-5f69-4&amp;from=paste&amp;id=u26cd82a8&amp;name=image.png&amp;originHeight=300&amp;originWidth=871&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16573&amp;status=done&amp;style=none&amp;taskId=u400fae09-7e8a-448a-a2ee-7a8c004d653&amp;title=" alt="image.png"><br>通配符说明:</p><ul><li>表示所有值. 例如:在分的字段上设置 “*”,表示每一分钟都会触发。</li></ul><p>? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为”?” 具体设置为 0 0 0 10 * ?</p><ul><li>表示区间。例如 在小时上设置 “10-12”,表示 10,11,12点都会触发。</li></ul><p>, 表示指定多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</p><p>/ 用于递增触发。如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)。在月字段上设置’1/3’所示每月1号开始，每隔三天触发一次。</p><p>L 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示“本月最后一个星期五”</p><p>W 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“).<br><strong>小提示：</strong>‘L’和 ‘W’可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发（一般指发工资）<br># 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六.注意如果指定”#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了)</p><p>小提示：周字段的设置，若使用英文字母是不区分大小写的 MON 与mon相同。</p><p>可通过在线生成Cron表达式的工具：<a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a> 来生成自己想要的表达式。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29229877/1667186043096-caa56b10-3c74-41bf-8561-4df1d1506350.png#averageHue=%23f7f6f5&amp;clientId=u481d04c8-5f69-4&amp;from=paste&amp;height=424&amp;id=u033634de&amp;name=image.png&amp;originHeight=636&amp;originWidth=872&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56551&amp;status=done&amp;style=none&amp;taskId=u1cececa1-8033-48ef-9522-fc094e32bd5&amp;title=&amp;width=581.3333333333334" alt="image.png"><br><strong>cron表达式使用占位符</strong><br>另外，cron属性接收的cron表达式支持占位符。eg：<br>配置文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">time</span><span class="token punctuation">:</span>  <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token important">*/5</span> * * * * *  <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每5秒执行一次：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron<span class="token operator">=</span><span class="token string">"${time.cron}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">testPlaceholder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Execute at "</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron<span class="token operator">=</span><span class="token string">"*/${time.interval} * * * * *"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">testPlaceholder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Execute at "</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="YhkFQ"></a></p><h3 id="1-2-2-zone"><a href="#1-2-2-zone" class="headerlink" title="1.2.2 zone"></a>1.2.2 zone</h3><p>时区，接收一个 java.util.TimeZone#ID。cron表达式会基于该时区解析。默认是一个空字符串，即取服务器所在地的时区。比如我们一般使用的时区Asia/Shanghai。该字段我们一般留空。<br><a name="gEHWd"></a></p><h3 id="1-2-3-fixedDelay"><a href="#1-2-3-fixedDelay" class="headerlink" title="1.2.3 fixedDelay"></a>1.2.3 fixedDelay</h3><p>上一次执行完毕时间点之后多长时间再执行。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment">//上一次执行完毕时间点之后5秒再执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a name="GRnj5"></a></p><h3 id="1-2-4-fixedDelayString"><a href="#1-2-4-fixedDelayString" class="headerlink" title="1.2.4 fixedDelayString"></a>1.2.4 fixedDelayString</h3><p>与 1.2.3 fixedDelay 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelayString <span class="token operator">=</span> <span class="token string">"5000"</span><span class="token punctuation">)</span> <span class="token comment">//上一次执行完毕时间点之后5秒再执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>占位符的使用：</strong><br>在 application.yml 配置文件中添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">time</span><span class="token punctuation">:</span><span class="token key atrule">fixedDelay</span><span class="token punctuation">:</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编写相关代码： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 定时任务的使用* @author pan_junbiao**/</span><span class="token annotation punctuation">@Component</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelayString <span class="token operator">=</span> <span class="token string">"${time.fixedDelay}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">testFixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎访问 的博客 "</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="AHvj7"></a></p><h3 id="1-2-5-fixedRate"><a href="#1-2-5-fixedRate" class="headerlink" title="1.2.5 fixedRate"></a>1.2.5 fixedRate</h3><p>上一次开始执行时间点之后多长时间再执行。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment">//上一次开始执行时间点之后5秒再执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a name="d6Dfx"></a></p><h3 id="1-2-6-fixedRateString"><a href="#1-2-6-fixedRateString" class="headerlink" title="1.2.6 fixedRateString"></a>1.2.6 fixedRateString</h3><p>与 1.2.5 fixedRate 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。<br><a name="tvfjx"></a></p><h3 id="1-2-7-initialDelay"><a href="#1-2-7-initialDelay" class="headerlink" title="1.2.7 initialDelay"></a>1.2.7 initialDelay</h3><p>第一次延迟多长时间后再执行。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> fixedRate<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment">//第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a name="Pu9TC"></a></p><h3 id="1-2-8-initialDelayString"><a href="#1-2-8-initialDelayString" class="headerlink" title="1.2.8 initialDelayString"></a>1.2.8 initialDelayString</h3><p>与 1.2.7 initialDelay 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。<br><a name="bWkBE"></a></p><h1 id="2、动态：基于接口（SchedulingConfigurer）"><a href="#2、动态：基于接口（SchedulingConfigurer）" class="headerlink" title="2、动态：基于接口（SchedulingConfigurer）"></a>2、动态：基于接口（SchedulingConfigurer）</h1><p>基于接口（SchedulingConfigurer）。<br><a name="Jr77W"></a></p><h1 id="3、基于注解设定多线程定时任务"><a href="#3、基于注解设定多线程定时任务" class="headerlink" title="3、基于注解设定多线程定时任务"></a>3、基于注解设定多线程定时任务</h1><p>创建多线程定时任务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试博客</title>
      <link href="/2023/04/08/ce-shi-bo-ke/"/>
      <url>/2023/04/08/ce-shi-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>序言<br>Spring 3.0 版本之后自带定时任务，SpringBoot中的核心具有集成了Scheduled功能 提供了@EnableScheduling注解和@Scheduled注解来实现定时任务功能。</p><p>使用SpringBoot创建定时任务非常简单，目前主要有以下三种创建方式：</p><p>● 1、基于注解（@Scheduled）<br>● 2、基于接口（SchedulingConfigurer） 前者相信大家都很熟悉，但是实际使用中我们往往想从数据库中读取指定时间来动态执行定时任务，这时候基于接口的定时任务就派上用场了。<br>● 3、基于注解设定多线程定时任务<br>基于注解（@Scheduled）<br>1.1 @Scheduled注解和@EnableScheduling注解的使用<br>基于注解@Scheduled默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。</p><p>@EnableScheduling注解： 在配置类上使用，开启计划任务的支持（类上）。</p><p>@Scheduled注解： 来声明这是一个任务，包括 cron，fixDelay，fixRate 等类型（方法上，需先开启计划任务的支持）。</p><p>【示例】SpringBoot项目中使用@Scheduled注解和@EnableScheduling注解实现定时任务。<br>1）开启定时任务<br>SpringBoot 项目在项目启动类上添加 @EnableScheduling 注解即可开启定时任务管理。<br>import org.springframework.boot.SpringApplication;<br>import org.springframework.boot.autoconfigure.SpringBootApplication;<br>import org.springframework.scheduling.annotation.EnableScheduling;</p><p>@SpringBootApplication<br>@EnableScheduling //开启定时任务<br>public class ScheduledDemoApplication<br>{<br>    public static void main(String[] args)<br>    {<br>        SpringApplication.run(ScheduledDemoApplication.class, args);<br>    }<br>}<br>（2）创建定时任务<br>创建定时任务，并使用 @Scheduled 注解。<br>package com.pjb.Schedule;</p><p>import org.springframework.scheduling.annotation.Scheduled;<br>import org.springframework.stereotype.Component;</p><p>import java.text.SimpleDateFormat;<br>import java.util.Date;</p><p>/**</p><ul><li>定时任务的使用</li><li>@author<br> **/<br>@Component<br>public class Task<br>{<br> @Scheduled(cron=”0/5 * *  * * ? “)   //每5秒执行一次<br> public void execute(){<br> SimpleDateFormat df = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”); //设置日期格式<br> System.out.println(“欢迎访问 “ + df.format(new Date()));<br> }<br>}<br>1.2 @Scheduled注解各参数讲解<br>@Scheduled注解的使用这里不详细说明，直接对8个参数进行讲解。<br>@Scheduled注解类的源码如下：<br>package org.springframework.scheduling.annotation;</li></ul><p>import java.lang.annotation.Documented;<br>import java.lang.annotation.ElementType;<br>import java.lang.annotation.Repeatable;<br>import java.lang.annotation.Retention;<br>import java.lang.annotation.RetentionPolicy;<br>import java.lang.annotation.Target;</p><p>@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>@Repeatable(Schedules.class)<br>public @interface Scheduled {<br>    String CRON_DISABLED = “-“;</p><pre><code>String cron() default "";String zone() default "";long fixedDelay() default -1L;String fixedDelayString() default "";long fixedRate() default -1L;String fixedRateString() default "";long initialDelay() default -1L;String initialDelayString() default "";</code></pre><p>}<br>1.2.1 cron<br>该参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。<br>● 年份(1970－2099)——@Scheduled是不支持的，spring quartz支持<br>cron 表达式语法：<br>格式：[秒] [分] [小时] [日] [月] [周] [年]</p><p>通配符说明:</p><ul><li>表示所有值. 例如:在分的字段上设置 “*”,表示每一分钟都会触发。</li></ul><p>? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为”?” 具体设置为 0 0 0 10 * ?</p><ul><li>表示区间。例如 在小时上设置 “10-12”,表示 10,11,12点都会触发。</li></ul><p>, 表示指定多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</p><p>/ 用于递增触发。如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)。在月字段上设置’1/3’所示每月1号开始，每隔三天触发一次。</p><p>L 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示“本月最后一个星期五”</p><p>W 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“).<br>小提示：’L’和 ‘W’可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发（一般指发工资）</p><h1 id="序号-表示每月的第几个周几-，例如在周字段上设置”6-3”表示在每月的第三个周六-注意如果指定”-5”-正好第五周没有周六，则不会触发该配置-用在母亲节和父亲节再合适不过了"><a href="#序号-表示每月的第几个周几-，例如在周字段上设置”6-3”表示在每月的第三个周六-注意如果指定”-5”-正好第五周没有周六，则不会触发该配置-用在母亲节和父亲节再合适不过了" class="headerlink" title="序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六.注意如果指定”#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了)"></a>序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六.注意如果指定”#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了)</h1><p>小提示：周字段的设置，若使用英文字母是不区分大小写的 MON 与mon相同。</p><p>可通过在线生成Cron表达式的工具：<a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a> 来生成自己想要的表达式。</p><p>cron表达式使用占位符<br>另外，cron属性接收的cron表达式支持占位符。eg：<br>配置文件：<br>time:<br>  cron: */5 * * * * *<br>  interval: 5<br>每5秒执行一次：<br>@Scheduled(cron=”${time.cron}”)<br>    void testPlaceholder1() {<br>        System.out.println(“Execute at “ + System.currentTimeMillis());<br>    }</p><p>@Scheduled(cron=”<em>/${time.interval} * * * * <em>“)<br>    void testPlaceholder2() {<br>    System.out.println(“Execute at “ + System.currentTimeMillis());<br>}<br>1.2.2 zone<br>时区，接收一个 java.util.TimeZone#ID。cron表达式会基于该时区解析。默认是一个空字符串，即取服务器所在地的时区。比如我们一般使用的时区Asia/Shanghai。该字段我们一般留空。<br>1.2.3 fixedDelay<br>上一次执行完毕时间点之后多长时间再执行。如：<br>@Scheduled(fixedDelay = 5000) //上一次执行完毕时间点之后5秒再执行<br>1.2.4 fixedDelayString<br>与 1.2.3 fixedDelay 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。如<br>@Scheduled(fixedDelayString = “5000”) //上一次执行完毕时间点之后5秒再执行<br>占位符的使用：<br>在 application.yml 配置文件中添加如下配置：<br>time:<br>    fixedDelay: 5000<br>编写相关代码：<br>/</em></em></p><ul><li>定时任务的使用</li><li>@author pan_junbiao<br>**/<br>@Component<br>  public class Task<br>{<br>  @Scheduled(fixedDelayString = “${time.fixedDelay}”)<br>  void testFixedDelayString()<br>  {<br>  System.out.println(“欢迎访问 的博客 “ + System.currentTimeMillis());<br>  }<br>}<br>1.2.5 fixedRate<br>上一次开始执行时间点之后多长时间再执行。如：<br>@Scheduled(fixedRate = 5000) //上一次开始执行时间点之后5秒再执行<br>1.2.6 fixedRateString<br>与 1.2.5 fixedRate 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。<br>1.2.7 initialDelay<br>第一次延迟多长时间后再执行。如：<br>@Scheduled(initialDelay=1000, fixedRate=5000) //第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次<br>1.2.8 initialDelayString<br>与 1.2.7 initialDelay 意思相同，只是使用字符串的形式。唯一不同的是支持占位符。<br>2、动态：基于接口（SchedulingConfigurer）<br>基于接口（SchedulingConfigurer）。<br>3、基于注解设定多线程定时任务<br>创建多线程定时任务。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/05/hello-world/"/>
      <url>/2023/04/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>张大宝 ：张明慧</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
